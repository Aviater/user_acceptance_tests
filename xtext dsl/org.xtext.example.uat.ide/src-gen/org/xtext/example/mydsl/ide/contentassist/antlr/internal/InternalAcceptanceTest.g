/*
 * generated by Xtext 2.25.0
 */
grammar InternalAcceptanceTest;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.AcceptanceTestGrammarAccess;

}
@parser::members {
	private AcceptanceTestGrammarAccess grammarAccess;

	public void setGrammarAccess(AcceptanceTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAcceptanceTest
entryRuleAcceptanceTest
:
{ before(grammarAccess.getAcceptanceTestRule()); }
	 ruleAcceptanceTest
{ after(grammarAccess.getAcceptanceTestRule()); } 
	 EOF 
;

// Rule AcceptanceTest
ruleAcceptanceTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAcceptanceTestAccess().getTestsAssignment()); }
		(rule__AcceptanceTest__TestsAssignment)*
		{ after(grammarAccess.getAcceptanceTestAccess().getTestsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItem
entryRuleItem
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemAccess().getGroup()); }
		(rule__Item__Group__0)
		{ after(grammarAccess.getItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getActionAssignment()); }
		(rule__Action__ActionAssignment)
		{ after(grammarAccess.getActionAccess().getActionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestCase
entryRuleTestCase
:
{ before(grammarAccess.getTestCaseRule()); }
	 ruleTestCase
{ after(grammarAccess.getTestCaseRule()); } 
	 EOF 
;

// Rule TestCase
ruleTestCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestCaseAccess().getGroup()); }
		(rule__TestCase__Group__0)
		{ after(grammarAccess.getTestCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionSendKeyword_0_0()); }
		'send'
		{ after(grammarAccess.getActionAccess().getActionSendKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionOrderKeyword_0_1()); }
		'order'
		{ after(grammarAccess.getActionAccess().getActionOrderKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionQueryKeyword_0_2()); }
		'query'
		{ after(grammarAccess.getActionAccess().getActionQueryKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__0__Impl
	rule__Item__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getItemKeyword_0()); }
	'item'
	{ after(grammarAccess.getItemAccess().getItemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__1__Impl
	rule__Item__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getNameAssignment_1()); }
	(rule__Item__NameAssignment_1)
	{ after(grammarAccess.getItemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__2__Impl
	rule__Item__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getXKeyword_2()); }
	'x'
	{ after(grammarAccess.getItemAccess().getXKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getQuantityAssignment_3()); }
	(rule__Item__QuantityAssignment_3)
	{ after(grammarAccess.getItemAccess().getQuantityAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__0__Impl
	rule__TestCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getCaseKeyword_0()); }
	'case:'
	{ after(grammarAccess.getTestCaseAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__1__Impl
	rule__TestCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getGivenAssignment_1()); }
	(rule__TestCase__GivenAssignment_1)
	{ after(grammarAccess.getTestCaseAccess().getGivenAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__2__Impl
	rule__TestCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getWhenAssignment_2()); }
	(rule__TestCase__WhenAssignment_2)
	{ after(grammarAccess.getTestCaseAccess().getWhenAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getThenAssignment_3()); }
	(rule__TestCase__ThenAssignment_3)
	{ after(grammarAccess.getTestCaseAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AcceptanceTest__TestsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAcceptanceTestAccess().getTestsTestCaseParserRuleCall_0()); }
		ruleTestCase
		{ after(grammarAccess.getAcceptanceTestAccess().getTestsTestCaseParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__QuantityAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getQuantityINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getItemAccess().getQuantityINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActionAlternatives_0()); }
		(rule__Action__ActionAlternatives_0)
		{ after(grammarAccess.getActionAccess().getActionAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__GivenAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getGivenCaseCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTestCaseAccess().getGivenCaseIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestCaseAccess().getGivenCaseIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTestCaseAccess().getGivenCaseCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__WhenAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getWhenConditionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getTestCaseAccess().getWhenConditionIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestCaseAccess().getWhenConditionIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getTestCaseAccess().getWhenConditionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getThenOutcomeCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTestCaseAccess().getThenOutcomeIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestCaseAccess().getThenOutcomeIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTestCaseAccess().getThenOutcomeCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
