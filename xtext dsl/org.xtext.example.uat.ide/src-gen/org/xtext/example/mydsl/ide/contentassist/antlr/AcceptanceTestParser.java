/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalAcceptanceTestParser;
import org.xtext.example.mydsl.services.AcceptanceTestGrammarAccess;

public class AcceptanceTestParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AcceptanceTestGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AcceptanceTestGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getActionAccess().getActionAlternatives_0(), "rule__Action__ActionAlternatives_0");
			builder.put(grammarAccess.getConditionAccess().getValueAlternatives_3_0(), "rule__Condition__ValueAlternatives_3_0");
			builder.put(grammarAccess.getOutcomeAccess().getResultAlternatives_3_0(), "rule__Outcome__ResultAlternatives_3_0");
			builder.put(grammarAccess.getItemAccess().getGroup(), "rule__Item__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getOutcomeAccess().getGroup(), "rule__Outcome__Group__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup(), "rule__TestCase__Group__0");
			builder.put(grammarAccess.getAcceptanceTestAccess().getTestsAssignment(), "rule__AcceptanceTest__TestsAssignment");
			builder.put(grammarAccess.getItemAccess().getNameAssignment_1(), "rule__Item__NameAssignment_1");
			builder.put(grammarAccess.getItemAccess().getQuantityAssignment_3(), "rule__Item__QuantityAssignment_3");
			builder.put(grammarAccess.getActionAccess().getActionAssignment(), "rule__Action__ActionAssignment");
			builder.put(grammarAccess.getCaseAccess().getItemsAssignment_1(), "rule__Case__ItemsAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getActionAssignment_1(), "rule__Condition__ActionAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getValueAssignment_3(), "rule__Condition__ValueAssignment_3");
			builder.put(grammarAccess.getOutcomeAccess().getItemsAssignment_1(), "rule__Outcome__ItemsAssignment_1");
			builder.put(grammarAccess.getOutcomeAccess().getResultAssignment_3(), "rule__Outcome__ResultAssignment_3");
			builder.put(grammarAccess.getTestCaseAccess().getGivenAssignment_1(), "rule__TestCase__GivenAssignment_1");
			builder.put(grammarAccess.getTestCaseAccess().getWhenAssignment_2(), "rule__TestCase__WhenAssignment_2");
			builder.put(grammarAccess.getTestCaseAccess().getThenAssignment_3(), "rule__TestCase__ThenAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AcceptanceTestGrammarAccess grammarAccess;

	@Override
	protected InternalAcceptanceTestParser createParser() {
		InternalAcceptanceTestParser result = new InternalAcceptanceTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AcceptanceTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AcceptanceTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
