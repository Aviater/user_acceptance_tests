/*
 * generated by Xtext 2.25.0
 */
grammar InternalAcceptanceTest;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.AcceptanceTestGrammarAccess;

}

@parser::members {

 	private AcceptanceTestGrammarAccess grammarAccess;

    public InternalAcceptanceTestParser(TokenStream input, AcceptanceTestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AcceptanceTest";
   	}

   	@Override
   	protected AcceptanceTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAcceptanceTest
entryRuleAcceptanceTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAcceptanceTestRule()); }
	iv_ruleAcceptanceTest=ruleAcceptanceTest
	{ $current=$iv_ruleAcceptanceTest.current; }
	EOF;

// Rule AcceptanceTest
ruleAcceptanceTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAcceptanceTestAccess().getTestsTestCaseParserRuleCall_0());
			}
			lv_tests_0_0=ruleTestCase
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAcceptanceTestRule());
				}
				add(
					$current,
					"tests",
					lv_tests_0_0,
					"org.xtext.example.mydsl.AcceptanceTest.TestCase");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	iv_ruleItem=ruleItem
	{ $current=$iv_ruleItem.current; }
	EOF;

// Rule Item
ruleItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='item'
		{
			newLeafNode(otherlv_0, grammarAccess.getItemAccess().getItemKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='x'
		{
			newLeafNode(otherlv_2, grammarAccess.getItemAccess().getXKeyword_2());
		}
		(
			(
				lv_quantity_3_0=RULE_INT
				{
					newLeafNode(lv_quantity_3_0, grammarAccess.getItemAccess().getQuantityINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getItemRule());
					}
					setWithLastConsumed(
						$current,
						"quantity",
						lv_quantity_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_action_0_1='send'
				{
					newLeafNode(lv_action_0_1, grammarAccess.getActionAccess().getActionSendKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed($current, "action", lv_action_0_1, null);
				}
				    |
				lv_action_0_2='order'
				{
					newLeafNode(lv_action_0_2, grammarAccess.getActionAccess().getActionOrderKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed($current, "action", lv_action_0_2, null);
				}
				    |
				lv_action_0_3='query'
				{
					newLeafNode(lv_action_0_3, grammarAccess.getActionAccess().getActionQueryKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed($current, "action", lv_action_0_3, null);
				}
			)
		)
	)
;

// Entry rule entryRuleTestCase
entryRuleTestCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestCaseRule()); }
	iv_ruleTestCase=ruleTestCase
	{ $current=$iv_ruleTestCase.current; }
	EOF;

// Rule TestCase
ruleTestCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case:'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTestCaseAccess().getGivenCaseCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getTestCaseAccess().getWhenConditionCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTestCaseAccess().getThenOutcomeCrossReference_3_0());
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
