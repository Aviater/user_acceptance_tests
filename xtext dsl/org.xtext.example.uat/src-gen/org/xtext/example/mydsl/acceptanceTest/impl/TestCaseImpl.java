/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.acceptanceTest.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.acceptanceTest.AcceptanceTestPackage;
import org.xtext.example.mydsl.acceptanceTest.Case;
import org.xtext.example.mydsl.acceptanceTest.Condition;
import org.xtext.example.mydsl.acceptanceTest.Outcome;
import org.xtext.example.mydsl.acceptanceTest.TestCase;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.acceptanceTest.impl.TestCaseImpl#getGiven <em>Given</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.acceptanceTest.impl.TestCaseImpl#getWhen <em>When</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.acceptanceTest.impl.TestCaseImpl#getThen <em>Then</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestCaseImpl extends MinimalEObjectImpl.Container implements TestCase
{
  /**
   * The cached value of the '{@link #getGiven() <em>Given</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGiven()
   * @generated
   * @ordered
   */
  protected Case given;

  /**
   * The cached value of the '{@link #getWhen() <em>When</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhen()
   * @generated
   * @ordered
   */
  protected Condition when;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected Outcome then;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AcceptanceTestPackage.Literals.TEST_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Case getGiven()
  {
    if (given != null && given.eIsProxy())
    {
      InternalEObject oldGiven = (InternalEObject)given;
      given = (Case)eResolveProxy(oldGiven);
      if (given != oldGiven)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AcceptanceTestPackage.TEST_CASE__GIVEN, oldGiven, given));
      }
    }
    return given;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Case basicGetGiven()
  {
    return given;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGiven(Case newGiven)
  {
    Case oldGiven = given;
    given = newGiven;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AcceptanceTestPackage.TEST_CASE__GIVEN, oldGiven, given));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getWhen()
  {
    if (when != null && when.eIsProxy())
    {
      InternalEObject oldWhen = (InternalEObject)when;
      when = (Condition)eResolveProxy(oldWhen);
      if (when != oldWhen)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AcceptanceTestPackage.TEST_CASE__WHEN, oldWhen, when));
      }
    }
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition basicGetWhen()
  {
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhen(Condition newWhen)
  {
    Condition oldWhen = when;
    when = newWhen;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AcceptanceTestPackage.TEST_CASE__WHEN, oldWhen, when));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Outcome getThen()
  {
    if (then != null && then.eIsProxy())
    {
      InternalEObject oldThen = (InternalEObject)then;
      then = (Outcome)eResolveProxy(oldThen);
      if (then != oldThen)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AcceptanceTestPackage.TEST_CASE__THEN, oldThen, then));
      }
    }
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Outcome basicGetThen()
  {
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThen(Outcome newThen)
  {
    Outcome oldThen = then;
    then = newThen;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AcceptanceTestPackage.TEST_CASE__THEN, oldThen, then));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AcceptanceTestPackage.TEST_CASE__GIVEN:
        if (resolve) return getGiven();
        return basicGetGiven();
      case AcceptanceTestPackage.TEST_CASE__WHEN:
        if (resolve) return getWhen();
        return basicGetWhen();
      case AcceptanceTestPackage.TEST_CASE__THEN:
        if (resolve) return getThen();
        return basicGetThen();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AcceptanceTestPackage.TEST_CASE__GIVEN:
        setGiven((Case)newValue);
        return;
      case AcceptanceTestPackage.TEST_CASE__WHEN:
        setWhen((Condition)newValue);
        return;
      case AcceptanceTestPackage.TEST_CASE__THEN:
        setThen((Outcome)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AcceptanceTestPackage.TEST_CASE__GIVEN:
        setGiven((Case)null);
        return;
      case AcceptanceTestPackage.TEST_CASE__WHEN:
        setWhen((Condition)null);
        return;
      case AcceptanceTestPackage.TEST_CASE__THEN:
        setThen((Outcome)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AcceptanceTestPackage.TEST_CASE__GIVEN:
        return given != null;
      case AcceptanceTestPackage.TEST_CASE__WHEN:
        return when != null;
      case AcceptanceTestPackage.TEST_CASE__THEN:
        return then != null;
    }
    return super.eIsSet(featureID);
  }

} //TestCaseImpl
