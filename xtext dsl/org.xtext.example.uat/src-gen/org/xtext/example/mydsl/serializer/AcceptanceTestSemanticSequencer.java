/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.acceptanceTest.AcceptanceTest;
import org.xtext.example.mydsl.acceptanceTest.AcceptanceTestPackage;
import org.xtext.example.mydsl.acceptanceTest.Case;
import org.xtext.example.mydsl.acceptanceTest.Condition;
import org.xtext.example.mydsl.acceptanceTest.Item;
import org.xtext.example.mydsl.acceptanceTest.Outcome;
import org.xtext.example.mydsl.acceptanceTest.TestCase;
import org.xtext.example.mydsl.services.AcceptanceTestGrammarAccess;

@SuppressWarnings("all")
public class AcceptanceTestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AcceptanceTestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AcceptanceTestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AcceptanceTestPackage.ACCEPTANCE_TEST:
				sequence_AcceptanceTest(context, (AcceptanceTest) semanticObject); 
				return; 
			case AcceptanceTestPackage.ACTION:
				sequence_Action(context, (org.xtext.example.mydsl.acceptanceTest.Action) semanticObject); 
				return; 
			case AcceptanceTestPackage.CASE:
				sequence_Case(context, (Case) semanticObject); 
				return; 
			case AcceptanceTestPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case AcceptanceTestPackage.ITEM:
				sequence_Item(context, (Item) semanticObject); 
				return; 
			case AcceptanceTestPackage.OUTCOME:
				sequence_Outcome(context, (Outcome) semanticObject); 
				return; 
			case AcceptanceTestPackage.TEST_CASE:
				sequence_TestCase(context, (TestCase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AcceptanceTest returns AcceptanceTest
	 *
	 * Constraint:
	 *     tests+=TestCase+
	 */
	protected void sequence_AcceptanceTest(ISerializationContext context, AcceptanceTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (action='send' | action='order' | action='query')
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.example.mydsl.acceptanceTest.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Case returns Case
	 *
	 * Constraint:
	 *     items+=Item+
	 */
	protected void sequence_Case(ISerializationContext context, Case semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (action=Action (value='true' | value='false'))
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Item returns Item
	 *
	 * Constraint:
	 *     (name=ID quantity=INT)
	 */
	protected void sequence_Item(ISerializationContext context, Item semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcceptanceTestPackage.Literals.ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcceptanceTestPackage.Literals.ITEM__NAME));
			if (transientValues.isValueTransient(semanticObject, AcceptanceTestPackage.Literals.ITEM__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcceptanceTestPackage.Literals.ITEM__QUANTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getItemAccess().getQuantityINTTerminalRuleCall_3_0(), semanticObject.getQuantity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Outcome returns Outcome
	 *
	 * Constraint:
	 *     (items+=Item* (result='true' | result='false'))
	 */
	protected void sequence_Outcome(ISerializationContext context, Outcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestCase returns TestCase
	 *
	 * Constraint:
	 *     (given=[Case|ID] when=[Condition|ID] then=[Outcome|ID])
	 */
	protected void sequence_TestCase(ISerializationContext context, TestCase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__GIVEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__GIVEN));
			if (transientValues.isValueTransient(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__WHEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__WHEN));
			if (transientValues.isValueTransient(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__THEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcceptanceTestPackage.Literals.TEST_CASE__THEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTestCaseAccess().getGivenCaseIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AcceptanceTestPackage.Literals.TEST_CASE__GIVEN, false));
		feeder.accept(grammarAccess.getTestCaseAccess().getWhenConditionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(AcceptanceTestPackage.Literals.TEST_CASE__WHEN, false));
		feeder.accept(grammarAccess.getTestCaseAccess().getThenOutcomeIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AcceptanceTestPackage.Literals.TEST_CASE__THEN, false));
		feeder.finish();
	}
	
	
}
